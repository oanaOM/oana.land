// Generated by Xata Codegen 0.26.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "plants",
    columns: [
      { name: "name", type: "string" },
      {
        name: "added_at_date",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "category", type: "string" },
      { name: "description", type: "text" },
      { name: "image", type: "file" },
      { name: "quantity", type: "int" },
      { name: "labels", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Plants = InferredTypes["plants"];
export type PlantsRecord = Plants & XataRecord;

export type DatabaseSchema = {
  plants: PlantsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Oana-s-workspace-qj71f1.eu-west-1.xata.sh/db/oana-land",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient({
    apiKey: import.meta.env.XATA_API_KEY,
    branch: import.meta.env.XATA_BRANCH,
  });
  return instance;
};
